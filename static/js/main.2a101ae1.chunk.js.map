{"version":3,"sources":["LoadingBar.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","loadingbar","react_default","a","createElement","className","label","class","style","width","percentage","Component","_this","state","calcule","seconds","Date","getSeconds","minutes","getMinutes","hour","getHours","date","getDate","day","getDay","month","getMonth","greeting","nameday","namemonth","nightmode","nightmodebtn","year","getFullYear","YearPercentage","WeekPercentage","DayPercentage","HourPercentage","MinutePercentage","setState","setInterval","stateUpdate","bind","clearInterval","LoadingBar","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2a101ae1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        \n    }\n  render() {\n      console.log(this.props)\n    var loadingbar = <div className=\"bar_container\"><div className=\"bar\"></div></div>;\n    return (\n    <div>\n        <p>{this.props.label}</p>\n        <div class=\"bar_bg\">\n            <div className={this.props.class + \" progress_bar\"} style={{width: this.props.percentage + \"%\"}}>\n            {loadingbar}\n            </div>\n        </div>     \n     </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport LoadingBar from \"./LoadingBar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.calcule();\n  }\n  calcule() {\n    var todayseconds = new Date(),\n      seconds = todayseconds.getSeconds();\n\n    var todayminutes = new Date(),\n      minutes = todayminutes.getMinutes();\n\n    var todayhour = new Date(),\n      hour = todayhour.getHours();\n\n    var todaydate = new Date(),\n      date = todaydate.getDate();\n\n    var todayday = new Date(),\n      day = todayday.getDay();\n\n    var todaymonth = new Date(),\n      month = todaymonth.getMonth();\n\n    var todayyear = new Date(),\n      year = todayyear.getFullYear();\n\n    var YearPercentage = (month / 12) * 100;\n    var WeekPercentage = (day / 7) * 100;\n    var DayPercentage = ((hour * 3600 + minutes * 60 + seconds) / 86400) * 100;\n    var HourPercentage = (minutes / 60) * 100;\n    var MinutePercentage = (seconds / 60) * 100;\n    var greeting = \"\";\n    var nameday = \"\";\n    var namemonth = \"\";\n    var nightmode = \"\";\n    var nightmodebtn = \"\";\n\n    if (hour <= 12) {\n      greeting = \"Good night!\";\n      nightmode = \"nightmodeon\";\n      nightmodebtn = \"nightmodeon_btn\";\n    }\n    if (hour <= 12 && hour >= 7) {\n      greeting = \"Good morning!\";\n    }\n    if (hour >= 12 && hour <= 18) {\n      greeting = \"Good afternoon!\";\n    }\n    if (hour >= 18) {\n      greeting = \"Good evening!\";\n    }\n\n    if (day == 0) {\n      nameday = \"Sunday\";\n    }\n    if (day == 1) {\n      nameday = \"Monday\";\n    }\n    if (day == 2) {\n      nameday = \"Tuesday\";\n    }\n    if (day == 3) {\n      nameday = \"Wednesday\";\n    }\n    if (day == 4) {\n      nameday = \"Thursday\";\n    }\n    if (day == 5) {\n      nameday = \"Friday\";\n    }\n    if (day == 6) {\n      nameday = \"Saturday\";\n    }\n    if (month == 0) {\n      namemonth = \"January\";\n    }\n    if (month == 1) {\n      namemonth = \"February\";\n    }\n    if (month == 2) {\n      namemonth = \"March\";\n    }\n    if (month == 3) {\n      namemonth = \"April\";\n    }\n    if (month == 4) {\n      namemonth = \"May\";\n    }\n    if (month == 5) {\n      namemonth = \"June\";\n    }\n    if (month == 6) {\n      namemonth = \"July\";\n    }\n    if (month == 7) {\n      namemonth = \"August\";\n    }\n    if (month == 8) {\n      namemonth = \"September\";\n    }\n    if (month == 9) {\n      namemonth = \"October\";\n    }\n    if (month == 10) {\n      namemonth = \"November\";\n    }\n    if (month == 11) {\n      namemonth = \"December\";\n    }\n\n    return {\n      date: date,\n      minutes: minutes,\n      hour: hour,\n      year: year,\n      month: month,\n      day: day,\n      seconds: seconds,\n      YearPercentage: YearPercentage,\n      WeekPercentage: WeekPercentage,\n      DayPercentage: DayPercentage,\n      HourPercentage: HourPercentage,\n      MinutePercentage: MinutePercentage,\n      greeting: greeting,\n      nameday: nameday,\n      namemonth: namemonth,\n      nightmode: nightmode,\n      nightmodebtn: nightmodebtn\n    };\n  }\n  stateUpdate() {\n    this.setState(this.calcule());\n  }\n  componentWillMount() {\n    setInterval(this.stateUpdate.bind(this), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.stateUpdate);\n  }\n  render() {\n    return (\n      <div className={\"App \" + this.state.nightmode}>\n        <div className=\"container\">\n          <p className=\"h2\">{this.state.greeting}</p>\n          <p className=\"h5\">\n            Today is {this.state.nameday} {this.state.date}{\" \"}\n            {this.state.namemonth} and it's {this.state.hour}:\n            {this.state.minutes}:{this.state.seconds}.\n          </p>\n          <LoadingBar\n            class=\"year\"\n            label=\"How much is left this year ?\"\n            percentage={this.state.YearPercentage}\n          />\n          <LoadingBar\n            class=\"week\"\n            label=\"How much is left this week ?\"\n            percentage={this.state.WeekPercentage}\n          />\n          <LoadingBar\n            class=\"day\"\n            label=\"How much is left today ?\"\n            percentage={this.state.DayPercentage}\n          />\n          <LoadingBar\n            class=\"hour\"\n            label=\"How much is left in this hour ?\"\n            percentage={this.state.HourPercentage}\n          />\n          <LoadingBar\n            class=\"second\"\n            label=\"How much is left in this minute ?\"\n            percentage={this.state.MinutePercentage}\n          />\n          <button\n            className={this.state.nightmodebtn}\n            onClick={this.stateUpdate.bind(this)}\n          >\n            Update\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport LoadingBar from \"./LoadingBar\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}